//1.2
console.log('Vegetables');
console.log('The Little Prince');

//1.3
console.log('JavaScript');
console.log(33.7);
console.log(true);
console.log(null);

//1.4
console.log(3.5+33);
console.log(2018-1969);
console.log(65/ 240);
console.log(0.2708 * 100);

//1.5
console.log('Teaching the world how to code' .length);

//1.6
// Log Codecademy in all uppercase letters
console.log('Codecademy'.toUpperCase());

// Use a string method to log the following statment without whitespace at the beginning and end of it.
console.log('    Remove whitespace   '.trim());

//1.7
console.log(Math.random() * 100);
console.log(Math.floor(Math.random() * 100));
console.log(Math.ceil(43.8))
console.log(Number.isInteger(2017))

//1.8
//opening line
console.log('It was love at first sight.');
/*
console.log('The first time Yossarian saw the chaplain he fell madly in love with him.');
console.log('Yossarian was in the hospital with a pain in his liver that fell just short of being jaundice.');
console.log('The doctors were puzzled by the fact that it wasn\'t quite jaundice.');
console.log('If it became jaundice they could treat it.');
console.log('If it didn\'t become jaundice and went away they could discharge him.');
console.log('But this just being short of jaundice all the time confused them.');
*/

//2.1
// This line of code sets the variable location to the string New York City
const location = 'New York City';

// This line of code sets the variable latitude to the number 40.7
let latitude = 40.7;

// This line of code sets the variable inNorthernHemisphere to true
let inNorthernHemisphere = true;

console.log(location);
console.log(latitude);
console.log(inNorthernHemisphere);

//2.2
const entree = 'Enchiladas';
const price = 12;
console.log(entree);
console.log(price);

entree = 'Tacos';

//2.3
let changeMe = false;
console.log(changeMe);

//2.4
let notDefined;
let valueless = undefined;

//2.5
let molecule = 16;
let particle = 18;
let assay = 3;

// Add and assign to molecule below
molecule+= 16;

// Multiply and assign to particle below
particle *=6.02;

// Increment assay by 1
assay++;

//2.6
let favoriteAnimal = 'cat';
console.log('My Favourite Animal' + favoriteAnimal);

//2.7
let myName = 'LaRissa';
let myCity = 'Sydney';

console.log(`My name is ${myName}. My favorite city is ${myCity}.`);

//3.1
let userName = 'LaRissa';
let knowsJavaScript = false;

//3.2
let isSoccerFan = true
if (isSoccerFan === true) {
    console.log('Goal!');
} else {
    console.log('No Goal');
}
//3.3
let wordCount = 1;

if (wordCount) {
  console.log("Great! You've started your work!");
} else {
  console.log('Better get to work!');
}


let favoritePhrase = 'run';

if (favoritePhrase) {
  console.log("This string doesn't seem to be empty.");
} else {
  console.log('This string is definitely empty.');
}

//3.4

let favoritePhrase = 'run';

if (!favoritePhrase) {
  console.log("This string doesn't seem to be empty.");
} else {
  console.log('This string is definitely empty.');
}

//3.5
let hungerLevel = (10)
if (hungerLevel >7) {
  console.log("time to eat!");
}
  else {
    console.log('We can eat later!');
  }

  //3.6
  let moonPhase = ("full")

if (moonPhase ==="full") {
    console.log("Howl!");
    }
  else {
    console.log("I swear I am not a werewolf");
  }

//3.7
let moonPhase = ("full")

if (moonPhase ==="full") {
    console.log("Howl!");
    }
else if (moonPhase ==="mostly full") {
  console.log("Arms and legs are getting hairier");
}
else if (moonPhase ==="mostly new") {
  console.log("back on two feet");
}
  else {
    console.log("Invalid moon phase");
  }

  let moonPhase = ("solar eclipse")

if (moonPhase ==="full") {
    console.log("Howl!");
    }
else if (moonPhase ==="mostly full") {
  console.log("Arms and legs are getting hairier");
}
else if (moonPhase ==="mostly new") {
  console.log("back on two feet");
}
  else {
    console.log("Invalid moon phase");
  }

//3.8
let moonPhase = 'full';
let isFoggyNight = false;

if (moonPhase === 'full' || isFoggyNight === true) {
  console.log('Howl!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') {
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}

//3.9
let moonPhase = 'full';

switch (moonPhase) {
  case 'full':
  	console.log('Howl!');
   	break;
  case 'mostly full':
  console.log('Arms and legs are getting hairier');
break;
  case 'mostly new':
  console.log('Back on two feet');
    break;
 default:
  console.log('Invalid moon phase');
    break;
}

//3.10
let isLocked = false;

isLocked ? console.log('You will need a key to open the door.') : console.log('You will not need a key to open the door.');

let isCorrect = true;

isCorrect ? console.log('Correct!') : console.log('Incorrect!');


let favoritePhrase = 'Love That!';

favoritePhrase === 'Love That!' ? console.log('I love that!') : console.log("I don't love that!");

//4.2
const takeOrder = () => {
  console.log('Order: pizza');
};

takeOrder();

//4.3
const takeOrder = (topping) => {
  console.log('Order: pizza topped with ' + topping);
};

takeOrder('mushrooms');

//4.4
const takeOrder = (topping, crustType) => {
  console.log('Order: ' + crustType + ' pizza topped with ' + topping);
};

takeOrder('mushroom', 'NY style');
takeOrder('spinach', 'gluten-free');
takeOrder('black olives', 'stuffed crust');

//4.5
let orderCount = 0;

const takeOrder = (topping, crustType) => {
  orderCount +=1;
  console.log('Order: ' + crustType + ' pizza topped with ' + topping);
};

takeOrder('mushroom', 'NY style');
takeOrder('spinach', 'gluten-free');
takeOrder('black olives', 'stuffed crust');

const getSubtotal = (itemCount) => {
  return itemCount * 7.5;
};

console.log(getSubtotal(orderCount));

//4.6
let orderCount = 0;

const takeOrder = (topping, crustType) => {
  orderCount++;
  console.log('Order: ' + crustType + ' pizza topped with ' + topping);
};

takeOrder('mushroom', 'NY style');
takeOrder('spinach', 'gluten-free');
takeOrder('black olives', 'stuffed crust');

const getSubTotal = (itemCount) => {
  return itemCount * 7.5;
};

const getTax = (itemCount) => {
  return getSubTotal(itemCount) * 0.06
}

const getTotal = (itemCount) => {
  return getTax(itemCount) + getSubTotal(itemCount)
}

console.log(getSubTotal(orderCount));

console.log(getTotal(orderCount));

//4.7
function isGreaterThan (numberOne, numberTwo) {
  if (numberOne > numberTwo) {
    return true;
  } else {
    return false;
  }
}
isGreaterThan(15, 2);

//4.8
const isGreaterThan = (numberOne, numberTwo) => {
   if(numberOne > numberTwo){
    return true;
  } else {
    return false;
  }
}

isGreaterThan(4,8);


//4.9
const volumeOfSphere = diameter =>
(1/6) * Math.PI * diameter * diameter * diameter;

console.log('The volume of a sphere is ' + volumeOfSphere(10) + ' cubic centimeters');

//5.2
const myNightSky = () => {
  return 'Night Sky: ' + satellite + ', ' + stars + ', ' + galaxy;
};

console.log(myNightSky());

//5.3
const satellite = 'The Moon';
const galaxy = 'The Milky Way';

let stars = 'North Star';

const myNightSky = () => {
  stars = 'Sirius';
  return 'Night Sky: ' + satellite + ', ' + stars + ', ' + galaxy;
};

console.log(myNightSky());
console.log(stars);

//5.4
const visibleLightWaves = () => {
  let lightWaves = 'Moonlight';
  console.log(lightWaves);
};

visibleLightWaves();
console.log(lightWaves);

//5.5
const visibleLightWaves = () => {
  let lightWaves = 'Moonlight';
  let region = 'The Arctic';
  if (region === 'The Arctic') {
    let lightWaves = 'Northern Lights';
    console.log(lightWaves);
  }
  console.log(lightWaves);
};

visibleLightWaves();

//5.6
const starCount = () => {
  let i = 5;
  console.log(i);
  for (let i = 0; i < 12; i++){
    console.log(i);
  }
};
starCount();
console.log(i)

//6.2
let newYearsResolutions = ['have a baby',"be the best coder",'be compleltely off social media'];
console.log(newYearsResolutions)

//6.3
let newYearsResolutions = ['have a baby',"be the best coder",'be compleltely off social media'];
console.log(newYearsResolutions)

let listItem = (newYearsResolutions[0]);
console.log(listItem);
console.log(newYearsResolutions[2]);
console.log(newYearsResolutions[3]);

//6.4

newYearsResolutions[1] = 'Learn a new language';

//6.5

console.log(newYearsResolutions.length);

//6.6
let newYearsResolutions = ['have a baby',"be the best coder",'be compleltely off social media'];
console.log(newYearsResolutions)

let listItem = (newYearsResolutions[0]);
console.log(listItem);
console.log(newYearsResolutions[2]);
console.log(newYearsResolutions[3]);

newYearsResolutions[1] = 'Learn a new language';

console.log(newYearsResolutions.length);

newYearsResolutions.push('got to iceland', 'be zero-waste');
console.log(newYearsResolutions)

newYearsResolutions.pop(4)

console.log(newYearsResolutions)

//6.7
let groceryList = ['orange juice', 'bananas', 'coffee beans', 'brown rice', 'pasta', 'coconut oil', 'plantains'];

groceryList.shift();

groceryList.unshift('popcorn');
console.log(groceryList);

console.log(groceryList.slice(1,4));

//6.8
let condiments = ['Ketchup', 'Mustard', 'Soy Sauce', 'Sriracha'];

const utensils = ['Fork', 'Knife', 'Chopsticks', 'Spork'];

condiments.push('mayo');
console.log(condiments);

let condiments = ['Ketchup', 'Mustard', 'Soy Sauce', 'Sriracha'];
condiments = ['Ketchup, Mustard, Soy Sauce, Sriracha, Mayo'];
const utensils = ['Fork', 'Knife', 'Chopsticks', 'Spork'];
utensils.pop(3);
utensils = ['grapefruit spoon'];
console.log(utensils);
console.log(condiments);

//7.2
let vacationSpots = ['Iceland', 'Route 66', 'Norway'];
console.log(vacationSpots[0]);
console.log(vacationSpots[1]);
console.log(vacationSpots[2]);

//7.3
let vacationSpots = ['Iceland', 'Route 66', 'Norway'];

for (let vacationSpotIndex = 0; vacationSpotIndex < vacationSpots.length; vacationSpotIndex++) {
  console.log('I would love to visit ' + vacationSpots[vacationSpotIndex]);
}

//7.4
let vacationSpots = ['Iceland', 'Route 66', 'Norway'];

for (let vacationSpotIndex = vacationSpots.length-1; vacationSpotIndex >= 0; vacationSpotIndex--) {
  console.log('I would love to visit ' + vacationSpots[vacationSpotIndex]);
}

//7.5
let myPlaces = ['Iceland', 'New Orleans', 'Sweden'];

let friendPlaces = ['Iceland', 'Atlanta', 'Saudi Arabia'];

for (let myPlacesIndex = 0; myPlacesIndex < myPlaces.length; myPlacesIndex++) {
  for (let friendPlacesIndex = 0; friendPlacesIndex < friendPlaces.length; friendPlacesIndex++) {
		if (myPlaces[myPlacesIndex] === friendPlaces[friendPlacesIndex]) {
      console.log(friendPlaces[friendPlacesIndex]);
    }
  }
}

//7.6
let cards = ['Diamond', 'Spade', 'Heart', 'Club'];

let currentCard = 'Heart';

while (currentCard !== 'Spade') {
  console.log(currentCard);
  currentCard = cards[Math.floor(Math.random() *4)];
}

console.log('You found a spade!');

//8.2
let fruits = ['mango', 'papaya', 'pineapple', 'apple'];

// Iterate over fruits below
fruits.forEach(function(fruits) {
  console.log('I want to eat a' + fruits)
     });

let fruits = ['mango', 'papaya', 'pineapple', 'apple'];

// Iterate over fruits below
fruits.forEach(fruitItem =>
  console.log('I want to eat a' + fruits)
     );
//8.3
let secretMessage = animals.map(function(animal) {
  return animal[0];
});

let animals = ['Hen', 'elephant', 'llama', 'leopard', 'ostrich', 'Whale', 'octopus', 'rabbit', 'lion', 'dog'];

// Create the secretMessage array below

let secretMessage = animals.map(animal => animal.charAt(0));

console.log(secretMessage.join(''));

let bigNumbers = [100, 200, 300, 400, 500];

// Create the smallNumbers array below

let smallNumbers = bigNumbers.map(num => num/100);

//8.4
let randomNumbers = [375, 200, 3.14, 7, 13, 852];

// Call .filter() on randomNumbers below

let smallNumbers = randomNumbers.filter(num => num < 250);

let favoriteWords = ['nostalgia', 'hyperbole', 'fervent', 'esoteric', 'serene'];

let longFavoriteWords = favoriteWords.filter(word => word.length > 7);

//8.5
let words = ['unique', 'uncanny', 'pique', 'oxymoron', 'guise'];

// Something is missing in the method call below

console.log(words.some(function(word) {
  return word.length < 6;
}));

// Use filter to create a new array

let interestingWords = words.filter(word => word.length > 5);

// Make sure to uncomment the code below and fix the incorrect code before running it

console.log(interestingWords.every(word =>  word.length > 5      ));

//8.6
let cities = ['Nashville', 'Charlotte', 'Asheville', 'Austin', 'Boulder'];

let nums = [1, 50, 75, 200, 350, 525, 1000];

//  Choose a method that will return undefined
cities.forEach(city => console.log('Have you visited ' + city + '?'));

// Choose a method that will return a new array
let longCities = cities.filter(city => city.length > 7);

// Choose a method that will return a new array
let smallerNums = nums.map(num => num - 5);

// Choose a method that will return a boolean value
nums.every(num => num < 0);

//9.2
let person = {
  name: 'LaRissa',
  age: 33
};

//9.3
let person = {
  name: 'LaRissa',
  age: 33
};
console.log(person.name);
console.log(person.age);

//9.4
};
console.log(person['name']);
console.log(person['age']);

//9.5
let person = {
  name: 'LaRissa',
  age: 33,
  weekendAlarm: 'No alarms needed',
  weekAlarm: 'Alarm set to 7AM'
};
console.log(person['name']);
console.log(person['age']);

let day = 'Thurs'
let alarm;
if (day === 'Saturday' || day ==='Sunday') {
  alarm = 'weekendAlarm';
  } else {
    alarm = 'weekAlarm';
  }
console.log(person[alarm]);

//9.6
let person = {
  name: 'LaRissa',
  age: 33,
  weekendAlarm: 'No alarms needed',
  weekAlarm: 'Alarm set to 7AM'
};
person.hobbies = ['Cat training', 'destroying my fears']

console.log(person['name']);
console.log(person['age']);
console.log(person['hobbies']);

//9.7
person['hobbies'] = ['Cat training', 'yoga'];
person.hobbies = ['Cat training'];

console.log(person['name']);
console.log(person['age']);
console.log(person['hobbies']);

//9.8
let person = {
  name: 'LaRissa',
  age: 33,
  weekendAlarm: 'No alarms needed',
  weekAlarm: 'Alarm set to 7AM',
  sayHello: () => {
  return 'Hello, There!';
}
};

person['hobbies'] = ['Cat training', 'yoga'];
person.hobbies = ['Cat training'];

console.log(person['name']);
console.log(person['age']);
console.log(person['hobbies']);
console.log(person.sayHello());

//9.9  weekAlarm: 'Alarm set to 7AM',
  sayHello: () => {
  	return 'Hello, There!';
},
  sayGoodbye() {
  return 'Goodbye!';
}
};

//9.10
name: 'LaRissa',
age: 33,
weekendAlarm: 'No alarms needed',
weekAlarm: 'Alarm set to 7AM',
sayHello() {
  return `Hello, my name is ${this.name}`;
},
sayGoodbye() {
return 'Goodbye!';
}
};

//9.11

let person = {
  name: 'LaRissa',
  age: 33,
  weekendAlarm: 'No alarms needed',
  weekAlarm: 'Alarm set to 7AM',

  sayHello: function() {
    return `Hello, my name is ${this.name}`;
  },

  sayGoodbye() {
    return 'Goodbye!';
  }
};

let friend = {
  name: 'Jessica'
};
friend.sayHello = person.sayHello

console.log(person.sayHello());
console.log(friend.sayHello());


person.hobbies = ['Cat Training', 'Yoga'];
person.hobbies = ['Cat Training'];
console.log(person.hobbies);


console.log(person['name']);
console.log(person['age']);

let day = 'Tuesday';
let alarm;

if (day === 'Saturday' || day === 'Sunday' ) {
  alarm = 'weekendAlarm';
} else {
  alarm = 'weekAlarm';
}

console.log(person[alarm]);

//9.12
let person = {
  _name: 'Lu Xun',
  _age: 137,

  set age(ageIn) {
    if (typeof ageIn === 'number') {
      this._age = ageIn;
    }
    else {
      console.log('Invalid input');
      return 'Invalid input';
    }
  }

};

//9.13
person.age = 'Thirty-nine';
};

}
}
person.age = 39;
};


//9.14

get age() {
  console.log(`${this._name} is ${this._age} years old.`);
  return this._age;
}

//10.1
class Dog {
  constructor(name) {
    this._name = name;
    this._behavior = 0;
  }

  get name() {
    return this._name;
  }
  get behavior() {
    return this._behavior;
  }

  incrementBehavior() {
    this._behavior ++;
  }
}
const halley = new Dog('Halley');
console.log(halley.name); // Print name value to console
console.log(halley.behavior); // Print behavior value to console
halley.incrementBehavior(); // Add one to behavior
console.log(halley.name); // Print name value to console
console.log(halley.behavior); // Print behavior value to console

//10.2
class Surgeon {
  constructor(name, department) {
    this._name = name;
    this._department = department;
  }
}

//10.3

const surgeonCurry = new Surgeon('Curry', 'Cardiovascular');

const surgeonDurant = new Surgeon('Durant', 'Orthopedics');

//10.4
class Surgeon {
  constructor(name, department) {
    this._name = name;
    this._department = department;
    this._remainingVacationDays = 20;
  }

  get name() {
    return this._name;
  }

  get department() {
    return this._department;
  }

  get remainingVacationDays() {
    return this._remainingVacationDays;
  }

  takeVacationDays(daysOff) {
    this._remainingVacationDays -= daysOff;
  }
}

const surgeonCurry = new Surgeon('Curry', 'Cardiovascular');
const surgeonDurant = new Surgeon('Durant', 'Orthopedics');

//10.5
console.log(surgeonCurry.name);
surgeonCurry.takeVacationDays(3);
console.log(surgeonCurry.remainingVacationDays);
